{"version":3,"sources":["components/Meme.js","App.js","serviceWorker.js","index.js"],"names":["Meme","template","onClick","style","width","height","key","id","src","url","alt","name","App","useState","templates","setTemplates","setTemplate","text0","setText0","text1","setText1","text2","setText2","text3","setText3","text4","setText4","meme","setMeme","boxCount","setBoxCount","useEffect","fetch","then","x","json","response","data","memes","textAlign","onSubmit","e","a","async","preventDefault","URL","searchParams","append","boxesParam","map","el","idx","join","toString","console","log","class","placeholder","value","onChange","target","hidden","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d952ae3f.chunk.js","sourcesContent":["import React from 'react';\r\nexport const Meme =({template, onClick}) => {\r\n    return (\r\n        <img\r\n            style={{width: 200, height: 200}}\r\n             key={template.id}\r\n             src={template.url}\r\n             alt={template.name}\r\n             onClick={onClick}\r\n        />\r\n    );\r\n};","import React, {useState, useEffect} from 'react';\nimport {Meme} from './components/Meme.js';\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [text0, setText0] = useState('');\n  const [text1, setText1] = useState('');\n  const [text2, setText2] = useState('');\n  const [text3, setText3] = useState('');\n  const [text4, setText4] = useState('');\n  const [meme, setMeme] = useState(null);\n  const [boxCount, setBoxCount] = useState(0);\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(x =>\n        x.json().then(response => setTemplates(response.data.memes))\n    );\n  },[]);\n\n  if (meme) {\n    return (\n        <div style={{ textAlign: \"center\" }}>\n          <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n        </div>\n    );\n  }\n\n  return(\n      <div style={ { textAlign: \"center\"}}>\n        {template && (\n            <form onSubmit={async e => {\n              e.preventDefault();\n\n              let url = new URL('https://api.imgflip.com/caption_image?');\n              url.searchParams.append('template_id', template.id);\n              url.searchParams.append('text0', text0);\n              url.searchParams.append('text1', text1);\n              url.searchParams.append('username', 'memegen115');\n              url.searchParams.append('password', 'memegen115');\n\n              let boxesParam = '';\n              if (boxCount > 2) {\n                let labels = [text0, text1, text2, text3, text4];\n                boxesParam = labels.map(function(el, idx) {\n                  return 'boxes[' + idx + '][text]'+'='+el;\n                }).join('&');\n              }\n              url = url.toString()+ '&'+ boxesParam;\n              console.log(url);\n              const response = await fetch(url);\n              const json = await response.json();\n              setMeme(json.data.url);\n            }}\n            >\n              <div class=\"container\">\n                <Meme template={template}/>\n                <input\n                    placeholder=\"Text One\"\n                    value={text0}\n                    onChange={e => setText0(e.target.value)}\n                />\n                <input\n                    placeholder=\"Text Two\"\n                    value={text1}\n                    onChange={e => setText1(e.target.value)}\n                    hidden={boxCount < 2}\n                />\n                <input\n                    placeholder=\"Text Three\"\n                    value={text2}\n                    onChange={e => setText2(e.target.value)}\n                    hidden={(boxCount < 3)}\n                />\n                <input\n                    placeholder=\"Text Four\"\n                    value={text3}\n                    onChange={e => setText3(e.target.value)}\n                    hidden={(boxCount < 4)}\n                />\n                <input\n                    placeholder=\"Text Five\"\n                    value={text4}\n                    onChange={e => setText4(e.target.value)}\n                    hidden={(boxCount < 5)}\n                />\n                <button type=\"submit\">Create Meme!</button>\n              </div>\n            </form>\n        )}\n        {!template &&\n        (\n            <>\n              <h1>Meme generator</h1>\n              <h2>Click a Meme to Begin</h2>\n              {templates.map(template => {\n      return (\n          <Meme\n              template={template}\n              onClick={() => {\n                setTemplate(template);\n                setBoxCount(template[\"box_count\"]);\n              }}\n          />\n      );\n    })}</>)}\n      </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}